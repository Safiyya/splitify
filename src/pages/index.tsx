import Head from "next/head";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import {
  Box,
  Button,
  Card,
  CardBody,
  CardFooter,
  Center,
  Container,
  Divider,
  Flex,
  Heading,
  Stack,
  Text,
  Image,
} from "@chakra-ui/react";
import { useState } from "react";
import { Artist, SavedTrack, SavedTracksData } from "@/types";
import { uniq } from "lodash";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [tracks, setTracks] = useState<any>();
  const [clusters, setClusters] = useState<SavedTracksData["clusters"]>();

  const showPlaylists = async () => {
    const response = await fetch("/api/tracks/saved");
    const data: SavedTracksData = await response.json();
    setTracks(data.items);
    setClusters(data.clusters);
  };

  console.log({
    tracks,
    clusters,
    realClusters: clusters?.filter((c) => c.tracks.length > 1),
  });

  return (
    <>
      <Head>
        <title>Splitify</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container centerContent maxWidth="80%">
          <Center width="100%" m={2}>
            <Flex flexDirection="column" width="100%">
              <Button onClick={showPlaylists}>Show clusters</Button>

              {clusters && (
                <>
                  <Heading> CLUSTERS</Heading>
                  {clusters.map((cluster, i) => (
                    <Box key={i} border={2} mb={4}>
                      <Text key={i} mb={4}>
                        CLUSTER {i} - {cluster.error}
                      </Text>

                      <Flex
                        flexDirection="row"
                        overflow="scroll"
                        width="100%"
                        flexWrap="wrap"
                      >
                        {cluster.tracks.map(({ id, name, artists, images }) => (
                          <Card
                            size="sm"
                            key={id}
                            direction={{ base: "column", sm: "row" }}
                            overflow="hidden"
                            variant="outline"
                            mb={1}
                            width="25%"
                          >
                            {images && (
                              <Image
                                maxW={{ base: "100%", sm: "200px" }}
                                src={images[0].url}
                                alt={name}
                              />
                            )}

                            <Stack>
                              <CardBody>
                                <Heading size="md">{name}</Heading>
                                <Text py="2">
                                  {artists.map((a) => a.name).join(" | ")}
                                </Text>
                              </CardBody>

                              {/* <CardFooter>
                                <Button variant="solid" colorScheme="green">
                                  Play
                                </Button>
                              </CardFooter> */}
                            </Stack>
                          </Card>
                        ))}
                      </Flex>

                      <Divider mt={2} />
                    </Box>
                  ))}
                </>
              )}
            </Flex>
          </Center>
        </Container>
      </main>
    </>
  );
}
